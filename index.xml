<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SegFault42</title>
    <link>https://segfault42.github.io/</link>
    <description>Recent content on SegFault42</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Dec 2018 13:58:00 +0700</lastBuildDate>
    
	<atom:link href="https://segfault42.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[C] Structure padding</title>
      <link>https://segfault42.github.io/posts/structure_padding/</link>
      <pubDate>Mon, 03 Dec 2018 13:58:00 +0700</pubDate>
      
      <guid>https://segfault42.github.io/posts/structure_padding/</guid>
      <description>Nous allons voir dans cet article que la taille d&amp;rsquo;une structure est peux être plus grande que ce que vous pensez et comment optimiser l&amp;rsquo;espace en RAM.
Un ordinateur lie et écrit en mémoire a une adresse divisible par 4 (x86) ou divisible par 8 (x86_64).
Quelle est la taille de cette structure ?
typedef struct structure { char a; int b; char c; char *d; short e; } structure;  Rapelle : Sur un system 64 bits :  char : 1 octet short : 2 octets int : 4 octets pointeur : 8 octets  ~/Documents/blog(master*) » clang main.</description>
    </item>
    
    <item>
      <title>[C] Incrementation de pointeur</title>
      <link>https://segfault42.github.io/posts/pointer_incrementation/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://segfault42.github.io/posts/pointer_incrementation/</guid>
      <description>Prenons en exemple ce main:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int	main() { // Allocation de 100 octets 	char *alloc = (char *)malloc(sizeof(char) * 100); if (alloc == NULL) { dprintf(2, &amp;#34;Memory allocation failure !\n&amp;#34;); return (EXIT_FAILURE); } alloc[0] = &amp;#39;a&amp;#39;; printf(&amp;#34;Adress alloc (before incrementation) = %p\n&amp;#34;, alloc); alloc++; alloc[0] = &amp;#39;b&amp;#39;; printf(&amp;#34;Adress alloc (after incrementation) = %p\n&amp;#34;, alloc); printf(&amp;#34;Value of alloc[0] = %c\n&amp;#34;, alloc[0]); printf(&amp;#34;Value of alloc[-1] = %c\n&amp;#34;, alloc[-1]); }   Output : /tmp » .</description>
    </item>
    
    <item>
      <title>AWS Photo unlimited storage</title>
      <link>https://segfault42.github.io/posts/aws_photo_unlimited_storage/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://segfault42.github.io/posts/aws_photo_unlimited_storage/</guid>
      <description>Les personnes abonnées au service Amazon Prime, bénéficient de plusieurs services en plus de la réception de colis en 1 jour ouvre.
Nous allons exploiter une faille dans le service Amazon Photo qui est compris dans l&amp;rsquo;abonnement Amazon Prime.
Pour bénéficier du stockage photo en illimité, il faut uploader des images au format jpeg. Tous les autres fichiers seront facturé.
Si on prend une image au format jpeg, qu&amp;rsquo;on append à la fin du fichier un deuxième fichier (peut importe le type ou la taille) et qu&amp;rsquo;on upload le fichier sur Amazon photo, l&amp;rsquo;upload s&amp;rsquo;éffectue et lors du download, le fichier téléchargé sera identique au fichier uploadé :D.</description>
    </item>
    
    <item>
      <title>Ecriture d&#39;un shell</title>
      <link>https://segfault42.github.io/posts/minishell/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://segfault42.github.io/posts/minishell/</guid>
      <description>Un shell est la couche le plus haut niveau du système Unix.
Pour faire simple, un shell est un programme qui prend en input une commande, la parse et l’exécute.
Nous allons diviser le travaillons en plusieurs parties :
 Récupérer en boucle l’entrée de l’utilisateur Parser l’entrée utilisateur Executer la commande Coder les builtins Gestion de l’environnement  Tout au long de ce tutorial, la compilation se fera comme suit :</description>
    </item>
    
    <item>
      <title>Installation du trinket m0 dans la nintendo switch</title>
      <link>https://segfault42.github.io/posts/trinketm0_guide/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://segfault42.github.io/posts/trinketm0_guide/</guid>
      <description>Dans ce tuto, nous allons voir l&amp;rsquo;installation du trinket M0 dans la nintendo switch.
Nous allons installer la puce a l&amp;rsquo;intérieur de la console, nous pourrons ensuite reprogrammer le trinket via le port USB-C de la console et reset la puce (pour le reprogrammer) sans démonter la console.
Prérequis :  Pc Nintendo Switch fer à souder Trinket M0 Tournevis Kynar  Software : Installation des dépendances :  Installer le logiciel arduino : sudo pacman -S arduino Lancer le logiciel : sudo arduino Dans File-&amp;gt;Preferences, ajouter cette URL : https://adafruit.</description>
    </item>
    
    <item>
      <title>Module de lecture de nand pour nintendo 3ds</title>
      <link>https://segfault42.github.io/posts/3ds_hard_memory_dump/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://segfault42.github.io/posts/3ds_hard_memory_dump/</guid>
      <description> Module de lecture de nand pour nintendo 3ds Point a souder au dos de la carte mere : Le DAT1, DAT2 et DAT3 sont uniquement a souder pour une meilleur vitesse de transfert. CLK altrnatif : CMD en rouge et DAT0 en noir : Connecteur souder a la carte mere de la console : Module de lecture de nand : Face arriere de la console : Module brancher a la console : Module brancher a la console : Module connecter au pc : Error code : </description>
    </item>
    
  </channel>
</rss>